require 'spec_helper.rb'
require 'parser/rhythms.rb'

RSpec.describe Parser::Rhythms do

	let(:parser) { Parser::Rhythms.new }

	describe 'parsing a polyrhythm and its components' do

		let(:rhythm_text) do
			# Source: The Day Can Say
			# Musical form generated by Dwarf Fortress, copyright Bay 12 Games
			<<-RHYTHM
			The sluste rhythm is made from two patterns: the bepa (considered the primary) and the nek.
			The patterns are to be played over the same period of time, concluding together regardless of beat number.

			The bepa rhythm is a single line with thirty-two beats divided into eight bars in a 4-4-4-4-4-4-4-4 pattern.
			The beats are named noloc (spoken no), kes (ke), suku (su) and rorec (ro).
			The beat is stressed as follows:

			| x - - - | x - - - | - - x - | x - x X | x x - - | x - x - | - x - - | x - - x |

			where X marks an accented beat, x is a beat, - is silent and | indicates a bar.

			The nek rhythm is a single line with two beats.
			The beat is stressed as follows:

			| - x |

			where x is a beat, - is silent, and | indicates a bar.
			RHYTHM
		end

		let(:bepa) do
			Rhythm.new([
				Rhythm::Beat.new(4/6.0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),

				Rhythm::Beat.new(4/6.0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),

				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(4/6.0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),

				Rhythm::Beat.new(1, 1, 0),
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(4/6.0, 1, 0),
				Rhythm::Beat.new(1, 1, 0),

				Rhythm::Beat.new(4/6.0, 1, 0),
				Rhythm::Beat.new(4/6.0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),

				Rhythm::Beat.new(4/6.0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(4/6.0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),

				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(4/6.0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),

				Rhythm::Beat.new(4/6.0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(4/6.0, 1, 0)
			])
		end

		let(:nek) do
			Rhythm.new([
				Rhythm::Beat.new(0, 1, 0),
				Rhythm::Beat.new(1, 1, 0)
			])
		end

		subject { parser.parse(rhythm_text) }

		specify 'parses the simple rhythms' do
			expect(subject[:bepa]).to eq(bepa)
			expect(subject[:nek]).to eq(nek)
		end

		specify 'combines them into the correct polyrhythm' do
			expect(subject[:sluste]).to be_a Polyrhythm
			expect(subject[:sluste]).primary.to eq bepa
			expect(subject[:sluste]).secondary.to eq nek
		end
	end
end
