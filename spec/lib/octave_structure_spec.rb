# frozen_string_literal: true

require 'spec_helper.rb'

require 'inevitable_cacophony/octave_structure'

RSpec.describe InevitableCacophony::OctaveStructure do
  subject { InevitableCacophony::OctaveStructure.new(scale_text) }

  describe 'parsing octave structures' do
    context 'with numbers higher than twenty' do
      let(:scale_text) do
        <<-SCALE
        Scales are constructed from twenty-one notes spaced evenly throughout
        the octave.

        The vignt-un hexatonic scale is thought of as two disjoint chords
        spanning no particular interval.
        These chords are named alpha and beta.

        The alpha trichord is the 1st, the 5th, and the 9th degrees of the
        twenty-one-note octave scale.

        The beta trichord is the 11th, the 16th, and the 21st
        (completing the octave) degrees of the twenty-one-note octave scale.
        SCALE
      end

      let(:expected_scalings) do
        [
          1,
          2**(1 / 21.0),
          2**(2 / 21.0),
          2**(3 / 21.0),
          2**(4 / 21.0),
          2**(5 / 21.0),
          2**(6 / 21.0),
          2**(7 / 21.0),
          2**(8 / 21.0),
          2**(9 / 21.0),
          2**(10 / 21.0),
          2**(11 / 21.0),
          2**(12 / 21.0),
          2**(13 / 21.0),
          2**(14 / 21.0),
          2**(15 / 21.0),
          2**(16 / 21.0),
          2**(17 / 21.0),
          2**(18 / 21.0),
          2**(19 / 21.0),
          2**(20 / 21.0)
        ]
      end

      specify 'parses them correctly' do
        scalings = subject
                   .chromatic_scale
                   .open
                   .note_scalings

        scalings.each_with_index do |scaling, index|
          expect(scaling)
            .to be_within(0.0001)
            .of(expected_scalings[index])
        end
      end
    end

    context 'with exact spacing' do
      let(:scale_text) do
        # Source: The Day Can Say
        # Musical form generated by Dwarf Fortress, copyright Bay 12 Games
        <<-SCALE
        Scales are constructed from nineteen notes dividing the octave.
        In quartertones, their spacing is roughly 1-xxxxx-xxx-xxxxx-x-xxxx0,
        where 1 is the tonic, 0 marks the octave, and x marks other notes.
        The tonic note is fixed only at the time of performance.
        SCALE
      end

      let(:expected_scalings) do
        [
          1,
          2**(2 / 24.0),
          2**(3 / 24.0),
          2**(4 / 24.0),
          2**(5 / 24.0),
          2**(6 / 24.0),

          2**(8 / 24.0),
          2**(9 / 24.0),
          2**(10 / 24.0),

          2**(12 / 24.0),
          2**(13 / 24.0),
          2**(14 / 24.0),
          2**(15 / 24.0),
          2**(16 / 24.0),

          2**(18 / 24.0),

          2**(20 / 24.0),
          2**(21 / 24.0),
          2**(22 / 24.0),
          2**(23 / 24.0)
        ]
      end

      specify 'parses them correctly' do
        scalings = subject
                   .chromatic_scale
                   .open
                   .note_scalings
        scalings.each_with_index do |scaling, index|
          expect(scaling).to be_within(0.0001).of(expected_scalings[index])
        end
      end
    end

    context 'with even spacing' do
      let(:scale_text) do
        # Source: The Bride of Trumpets
        # Musical form generated by Dwarf Fortress, copyright Bay 12 Games
        <<-SCALE
        Scales are constructed from twelve notes spaced evenly throughout the
        octave.
        The tonic note is a fixed note passed from teacher to student.
        Every note is named.
        The names are shato (spoken sha), almef (al), oñod (oñ), umo (um),
        rostfen (ro), hiñer (hi), ohe (oh), nazweng (na), tod (to), and
        zomuth (zo).

        The ani pentatonic scale is thought of as two disjoint chords
        spanning a perfect fifth and a major third. These chords are named
        ilpi and dik.

        The ilpi trichord is the 1st, the 3rd, and the 8th degrees of the
        semitone octave scale.

        The dik trichord is the 9th, the 10th, and the 13th
        (completing the octave) degrees of the semitone octave scale.
        SCALE
      end

      let(:chromatic_scale) { subject.chromatic_scale }

      specify 'starts at the tonic' do
        expect(chromatic_scale.note_scalings.first).to eq 1
      end

      specify 'increases in semitone increments through the scale' do
        chromatic_scale.note_scalings.each_cons(2) do |last, current|
          expect(current / last).to be_within(0.0001).of(2**(1 / 12.0))
        end
      end

      specify 'ends with the octave' do
        expect(chromatic_scale.note_scalings.last).to be_within(0.0001).of(2)
      end

      context 'and generating chords' do
        let(:ilpi_chord) { subject.chords[:ilpi] }
        let(:dik_chord) { subject.chords[:dik] }

        specify 'uses the correct notes' do
          expect(ilpi_chord.note_scalings).to eq(
            [
              1,
              # Note 0-based indexing; first note is the tonic (tonic * 2**0)
              2**(2 / 12.0),
              2**(7 / 12.0)
            ]
          )

          expect(dik_chord.note_scalings).to eq(
            [
              2**(8 / 12.0),
              2**(9 / 12.0),
              2
            ]
          )
        end
      end

      context 'and generating a scale' do
        let(:ani_scale) { subject.scales[:ani] }

        specify 'uses the correct notes' do
          expect(ani_scale.note_scalings).to eq(
            [
              1,
              2**(2 / 12.0),
              2**(7 / 12.0),
              2**(8 / 12.0),
              2**(9 / 12.0),
              2
            ]
          )
        end

        specify 'excludes the octave when requested' do
          expect(ani_scale.open.note_scalings.last).to eq(2**(9 / 12.0))
        end
      end
    end

    context 'using the fundamental division of the perfect fourth' do
      let(:scale_text) do
        # Source: The Swamp of Jumping
        # Musical form generated by Dwarf Fortress, copyright Bay 12 Games
        <<-SCALE
        Scales are conceived of as two chords built using a division of the perfect fourth interval into eight notes.  The tonic note is fixed only at the time of performance.

        As always, the aratha hexatonic scale is thought of as two disjoint chords drawn from the fundamental division of the perfect fourth.  These chords are named datha and warera.

        The datha trichord is the 1st, the 2nd and the 8th degrees of the fundamental perfect fourth division.

        The warera tetrachord is the 1st, the 3rd, the 7th and the 8th degrees of the fundamental perfect fourth division.
        SCALE
      end

      let(:perfect_fourth) { 4/3r }

      describe 'calculating the basic division' do
        let(:chromatic_scale) { subject.chromatic_scale }
        let(:fourths) do
          halfway = chromatic_scale.note_scalings.length / 2
          [
            chromatic_scale.note_scalings[0...halfway],
            chromatic_scale.note_scalings[halfway..-1]
          ]
        end

        specify 'starts at the tonic' do
          expect(chromatic_scale.note_scalings.first).to eq 1
          expect(fourths[0].first).to eq 1
        end

        specify 'increases in eighth-of-a-perfect-fourth increments through the first fourth' do
          fourths.first.each_cons(2) do |last, current|
            expect(current / last).to be_within(0.0001).of(perfect_fourth ** (1/7.0))
          end
        end

        specify 'goes up a fourth in the first half of the scale' do
          expect(fourths[0].last).to be_within(0.0001).of(1 * perfect_fourth)
        end

        specify 'starts the second half down a fourth from the octave' do
          expect(fourths[1].first).to be_within(0.0001).of(2 / perfect_fourth)
        end

        specify 'increases in eighth-of-a-perfect-fourth increments through the second fourth' do
          fourths.last.each_cons(2) do |last, current|
            expect(current / last).to be_within(0.0001).of(perfect_fourth ** (1/7.0))
          end
        end

        specify 'ends on the octave' do
          expect(chromatic_scale.note_scalings.last).to be_within(0.0001).of(2)
        end
      end

      describe 'calculating specific chords' do
        let(:datha_chord) { subject.chords[:datha] }
        let(:warera_chord) { subject.chords[:warera] }

        specify 'uses the correct notes for the first chord' do
          expect(datha_chord.note_scalings[0]).to eq 1
          expect(datha_chord.note_scalings[1]).to be_within(0.0001).of(1 * perfect_fourth**(1/7.0))
          expect(datha_chord.note_scalings[2]).to be_within(0.0001).of(1 * perfect_fourth)
        end

        specify 'uses the correct notes for the second chord' do
          expect(warera_chord.note_scalings[0]).to eq 1
          expect(warera_chord.note_scalings[1]).to be_within(0.0001).of(1 * perfect_fourth**(2/7.0))
          expect(warera_chord.note_scalings[2]).to be_within(0.0001).of(1 * perfect_fourth**(6/7.0))
          expect(warera_chord.note_scalings[3]).to be_within(0.0001).of(1 * perfect_fourth)
        end
      end

      describe 'assembling scales' do
        let(:aratha_scale) { subject.scales[:aratha] }

        specify 'transposes the second chord up when assembling the scale' do
          expect(aratha_scale.note_scalings[0]).to eq 1
          expect(aratha_scale.note_scalings[1]).to be_within(0.0001).of(1 * perfect_fourth**(1/7.0))
          expect(aratha_scale.note_scalings[2]).to be_within(0.0001).of(1 * perfect_fourth)

          expect(aratha_scale.note_scalings[3]).to be_within(0.0001).of(2 / perfect_fourth)
          expect(aratha_scale.note_scalings[4]).to be_within(0.0001).of((2 / perfect_fourth) * perfect_fourth**(2/7.0))
          expect(aratha_scale.note_scalings[5]).to be_within(0.0001).of((2 / perfect_fourth) * perfect_fourth**(6/7.0))
          expect(aratha_scale.note_scalings[6]).to be_within(0.0001).of(2)
        end
      end
    end
  end
end
