#!/usr/bin/env/ruby

# frozen_string_literal: true

require 'optparse'
require 'stringio'

require 'inevitable_cacophony/parser/rhythms'
require 'inevitable_cacophony/parser/legends'
require 'inevitable_cacophony/octave_structure'
require 'inevitable_cacophony/midi_generator'
require 'inevitable_cacophony/tone_generator'
require 'inevitable_cacophony/phrase'
require 'inevitable_cacophony/version'

command = lambda {
  octave = InevitableCacophony::OctaveStructure.new(input)

  Array.new(3) do
    chord_notes = []
    rhythm.each_beat.map do |beat|
      chords = octave.chords.values
      if chord_notes.empty?
        chord_notes = chords.sample(random: rng).note_scalings.dup
      end

      note = InevitableCacophony::Note.new(chord_notes.shift, beat)
      InevitableCacophony::Phrase.new(note, tempo: options[:tempo])
    end
  end.flatten
}

render = lambda { |phrases|
  tone = InevitableCacophony::ToneGenerator.new(options[:tonic])
  phrases.each { |phrase| tone.add_phrase(phrase) }

  # Have to buffer output so wavefile can seek back to the beginning
  # to write format info
  output_buffer = StringIO.new
  tone.write(output_buffer)
  $stdout.write(output_buffer.string)
}

def input
  @input ||= if ARGV.empty?
                $stdin.read
             elsif ARGV.length == 1
               File.read(ARGV[0])
             else
               raise "Call with at most one non-option argument. TODO: get usage message"
             end
end

def options
  @options ||= {
    tempo: 120, # beats per minute
    tonic: 440 # Hz; middle A
  }
end

def rng
  @rng ||= Random.new(options[:seed] || Random.new_seed)
end

def midi_generator
  @midi_generator ||= begin
    octave_structure = InevitableCacophony::OctaveStructure.new(input)
    InevitableCacophony::MidiGenerator.new(octave_structure,
                                           options[:tonic])
  end
end

def rhythm
  @rhythm ||= begin
    all_rhythms = InevitableCacophony::Parser::Rhythms.new.parse(input)

    # InevitableCacophony::Pick the first rhythm mentioned in the file,
    # which should be the one used by the first section of the piece.
    rhythm_name = all_rhythms
                  .keys
                  .min_by { |name| input.index(name.to_s) }

    if all_rhythms[rhythm_name]
      all_rhythms[rhythm_name]
    else

      # If no rhythms are mentioned,
      # parse any rhythm string we can find in the input.
      rhythm_score = input.match(/(\|( |\`)((-|x|X|!)( |\`|\'))+)+\|/).to_s
      InevitableCacophony::Parser::RhythmLine.new.parse(rhythm_score)
    end
  end
end

OptionParser.new do |opts|
  opts.banner = 'Usage: ruby -Ilib cacophony.rb [options] [file]'

  opts.on('-b', '--beat', 'Play a beat in the given rhythm') do
    command = lambda {
      notes = Array.new(3) do
        rhythm.each_beat.map do |beat|
          InevitableCacophony::Note.new(1, beat)
        end
      end.flatten

      [InevitableCacophony::Phrase.new(*notes, tempo: options[:tempo])]
    }
  end

  opts.on('-s', '--scale', 'Play a scale in the given style') do
    command = lambda {
      octave = InevitableCacophony::OctaveStructure.new(input)

      scale = if options[:chromatic]
                octave.chromatic_scale
              else
                octave.scales.values.first
              end

      rising_and_falling = scale.open.note_scalings +
                           scale.open.transpose(2).note_scalings +
                           scale.transpose(2).note_scalings.reverse +
                           scale.open.note_scalings.reverse
      notes = rising_and_falling.map do |factor|
        InevitableCacophony::Note.new(
          factor,
          InevitableCacophony::Rhythm::Beat.new(1, 1, 0)
        )
      end

      [InevitableCacophony::Phrase.new(*notes, tempo: options[:tempo])]
    }
  end

  opts.on('-p', '--polyrhythm RATIO',
          'Rather than loading rhythm normally, use a polyrhythm in the ' \
          'given ratio (e.g 7:11, 2:3:4).') do |ratio|
    components = ratio.split(':').map do |length|
      InevitableCacophony::Rhythm.new(
        [InevitableCacophony::Rhythm::Beat.new(1, 1, 0)] * length.to_i
      )
    end

    primary, *secondaries = components
    @rhythm = InevitableCacophony::Polyrhythm.new(primary, secondaries)
  end

  opts.on('-e', '--eval FORM',
          'Parse FORM rather than reading a form description ' \
          'from stdin') do |form|
    @input = form
  end

  opts.on('-l', '--legends ID', Integer, 'Parse a legends.xml file, and generate music for musical_form <ID> in that file.') do |id|
    parser = InevitableCacophony::Parser::Legends.new
    forms = parser.parse(input)
    @input = forms[id]

    raise "No such form #{id} in input" unless @input
  end

  opts.on('--chromatic',
          "Use 'chromatic' scales (all notes in the form) " \
          'rather than the named scales typical of the form') do
    options[:chromatic] = true
  end

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end

  opts.on('-v', '--version', 'Show version and exit') do
    puts "Inevitable Cacophony version #{InevitableCacophony::VERSION}"
    exit
  end

  opts.on('-t', '--tempo TEMPO',
          'Play at the given tempo in beats per ' \
          "minute (default #{options[:tempo]}). " \
          'For polyrhythms, this applies to whatever ' \
          'number is given first: at the same tempo, ' \
          'a 2:3 rhythm will play faster ' \
          'than a 3:2.') do |tempo|
    options[:tempo] = tempo.to_i
  end

  opts.on('-S', '--seed SEED',
          'Generate random melodies with the given seed, ' \
          'for repeatable results.') do |seed|
    int_seed = seed.to_i
    raise 'Expected seed to be a number' unless seed == int_seed.to_s

    options[:seed] = int_seed
  end

  opts.on('-m', '--midi',
          'Generate output in MIDI rather than WAV format ' \
          '(needs file from -M to play in tune)') do
    render = lambda { |phrases|
      phrases.each do |phrase|
        midi_generator.add_phrase(phrase)
      end
      midi_generator.write($stdout)
    }
  end

  opts.on('-M', '--midi-tuning',
          'Instead of music, generate a Scala (Timidity-compatible) ' \
          'tuning file for use with MIDI output from --midi') do
    command = lambda {
      midi_generator.frequency_table
    }
    render = lambda { |frequencies|
      frequencies.table.each do |frequency|
        $stdout.puts((frequency * 1000).round)
      end
    }
  end
end.parse!

render.call(command.call)
